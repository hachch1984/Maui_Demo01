// <auto-generated />
using System;
using DbEf;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Description = "Devices and gadgets",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Description = "Fiction and non-fiction books",
                            Name = "Books"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Description = "Men's and women's clothing",
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            Description = "Home appliances and kitchen gadgets",
                            Name = "Home & Kitchen"
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            Description = "Sports equipment and accessories",
                            Name = "Sports"
                        });
                });

            modelBuilder.Entity("Model.Message_Sended", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("UserId", "Date", "Time");

                    b.ToTable("Message_Sended", (string)null);
                });

            modelBuilder.Entity("Model.Message_ToSend", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("UserId", "Date", "Time");

                    b.ToTable("Message_ToSend", (string)null);
                });

            modelBuilder.Entity("Model.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal (10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            CategoryId = 1,
                            Description = "High-performance laptop",
                            Name = "Laptop",
                            Price = 999.99m
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            CategoryId = 1,
                            Description = "Latest model smartphone",
                            Name = "Smartphone",
                            Price = 699.99m
                        },
                        new
                        {
                            Id = 3L,
                            Active = true,
                            CategoryId = 1,
                            Description = "Noise cancelling headphones",
                            Name = "Headphones",
                            Price = 199.99m
                        },
                        new
                        {
                            Id = 4L,
                            Active = true,
                            CategoryId = 1,
                            Description = "Wireless mouse",
                            Name = "Mouse",
                            Price = 29.99m
                        },
                        new
                        {
                            Id = 5L,
                            Active = true,
                            CategoryId = 1,
                            Description = "Mechanical keyboard",
                            Name = "Keyboard",
                            Price = 89.99m
                        },
                        new
                        {
                            Id = 6L,
                            Active = true,
                            CategoryId = 2,
                            Description = "Award-winning fiction novel",
                            Name = "Novel",
                            Price = 15.99m
                        },
                        new
                        {
                            Id = 7L,
                            Active = true,
                            CategoryId = 2,
                            Description = "Biography of a famous scientist",
                            Name = "Biography",
                            Price = 19.99m
                        },
                        new
                        {
                            Id = 8L,
                            Active = true,
                            CategoryId = 2,
                            Description = "A collection of gourmet recipes",
                            Name = "Cookbook",
                            Price = 35.99m
                        },
                        new
                        {
                            Id = 9L,
                            Active = true,
                            CategoryId = 2,
                            Description = "Detailed history of the 20th century",
                            Name = "History",
                            Price = 40.99m
                        },
                        new
                        {
                            Id = 10L,
                            Active = true,
                            CategoryId = 2,
                            Description = "Sci-fi thriller set in space",
                            Name = "Science Fiction",
                            Price = 14.99m
                        },
                        new
                        {
                            Id = 11L,
                            Active = true,
                            CategoryId = 3,
                            Description = "Cotton t-shirt",
                            Name = "T-shirt",
                            Price = 20.99m
                        },
                        new
                        {
                            Id = 12L,
                            Active = true,
                            CategoryId = 3,
                            Description = "Comfortable blue jeans",
                            Name = "Jeans",
                            Price = 45.99m
                        },
                        new
                        {
                            Id = 13L,
                            Active = true,
                            CategoryId = 3,
                            Description = "Leather jacket",
                            Name = "Jacket",
                            Price = 89.99m
                        },
                        new
                        {
                            Id = 14L,
                            Active = true,
                            CategoryId = 3,
                            Description = "Running sneakers",
                            Name = "Sneakers",
                            Price = 50.99m
                        },
                        new
                        {
                            Id = 15L,
                            Active = true,
                            CategoryId = 3,
                            Description = "Woolen scarf",
                            Name = "Scarf",
                            Price = 19.99m
                        },
                        new
                        {
                            Id = 16L,
                            Active = true,
                            CategoryId = 4,
                            Description = "Multi-function blender",
                            Name = "Blender",
                            Price = 59.99m
                        },
                        new
                        {
                            Id = 17L,
                            Active = true,
                            CategoryId = 4,
                            Description = "Compact microwave",
                            Name = "Microwave",
                            Price = 99.99m
                        },
                        new
                        {
                            Id = 18L,
                            Active = true,
                            CategoryId = 4,
                            Description = "Stainless steel toaster",
                            Name = "Toaster",
                            Price = 29.99m
                        },
                        new
                        {
                            Id = 19L,
                            Active = true,
                            CategoryId = 4,
                            Description = "Espresso coffee maker",
                            Name = "Coffee Maker",
                            Price = 120.99m
                        },
                        new
                        {
                            Id = 20L,
                            Active = true,
                            CategoryId = 4,
                            Description = "Energy efficient dishwasher",
                            Name = "Dishwasher",
                            Price = 399.99m
                        },
                        new
                        {
                            Id = 21L,
                            Active = true,
                            CategoryId = 5,
                            Description = "Professional football",
                            Name = "Football",
                            Price = 25.99m
                        },
                        new
                        {
                            Id = 22L,
                            Active = true,
                            CategoryId = 5,
                            Description = "Carbon fiber tennis racket",
                            Name = "Tennis Racket",
                            Price = 115.99m
                        },
                        new
                        {
                            Id = 23L,
                            Active = true,
                            CategoryId = 5,
                            Description = "Official size basketball",
                            Name = "Basketball",
                            Price = 29.99m
                        },
                        new
                        {
                            Id = 24L,
                            Active = true,
                            CategoryId = 5,
                            Description = "Set of golf clubs",
                            Name = "Golf Clubs",
                            Price = 460.99m
                        },
                        new
                        {
                            Id = 25L,
                            Active = true,
                            CategoryId = 5,
                            Description = "Aluminum baseball bat",
                            Name = "Baseball Bat",
                            Price = 89.99m
                        });
                });

            modelBuilder.Entity("Model.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserDocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserDocumentValue")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("UserDocumentTypeId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Email = "john.doe@email.com",
                            Name = "John Doe",
                            Password = "123",
                            UserDocumentTypeId = 1,
                            UserDocumentValue = "01123456"
                        },
                        new
                        {
                            Id = 2L,
                            Email = "jane.smith@email.com",
                            Name = "Jane Smith",
                            Password = "123",
                            UserDocumentTypeId = 1,
                            UserDocumentValue = "02123456"
                        },
                        new
                        {
                            Id = 3L,
                            Email = "alice.johnson@email.com",
                            Name = "Alice Johnson",
                            Password = "123",
                            UserDocumentTypeId = 1,
                            UserDocumentValue = "03234567"
                        },
                        new
                        {
                            Id = 4L,
                            Email = "bob.brown@email.com",
                            Name = "Bob Brown",
                            Password = "123",
                            UserDocumentTypeId = 1,
                            UserDocumentValue = "04234567"
                        },
                        new
                        {
                            Id = 5L,
                            Email = "carol.white@email.com",
                            Name = "Carol White",
                            Password = "123",
                            UserDocumentTypeId = 1,
                            UserDocumentValue = "05234567"
                        },
                        new
                        {
                            Id = 6L,
                            Email = "dave.black@email.com",
                            Name = "Dave Black",
                            Password = "123",
                            UserDocumentTypeId = 1,
                            UserDocumentValue = "06234567"
                        },
                        new
                        {
                            Id = 7L,
                            Email = "eve.green@email.com",
                            Name = "Eve Green",
                            Password = "123",
                            UserDocumentTypeId = 1,
                            UserDocumentValue = "07234567"
                        },
                        new
                        {
                            Id = 8L,
                            Email = "frank.gray@email.com",
                            Name = "Frank Gray",
                            Password = "123",
                            UserDocumentTypeId = 1,
                            UserDocumentValue = "08234567"
                        },
                        new
                        {
                            Id = 9L,
                            Email = "grace.blue@email.com",
                            Name = "Grace Blue",
                            Password = "123",
                            UserDocumentTypeId = 1,
                            UserDocumentValue = "09234567"
                        },
                        new
                        {
                            Id = 10L,
                            Email = "henry@email.com",
                            Name = "Henry",
                            Password = "123",
                            UserDocumentTypeId = 1,
                            UserDocumentValue = "10234567"
                        });
                });

            modelBuilder.Entity("Model.UserDocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("UserDocumentType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Name = "Dni"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Name = "Pasaporte"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Name = "Libreta Militar"
                        });
                });

            modelBuilder.Entity("Model.Message_Sended", b =>
                {
                    b.HasOne("Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Message_ToSend", b =>
                {
                    b.HasOne("Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Product", b =>
                {
                    b.HasOne("Model.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Model.User", b =>
                {
                    b.HasOne("Model.UserDocumentType", "UserDocumentType")
                        .WithMany()
                        .HasForeignKey("UserDocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDocumentType");
                });
#pragma warning restore 612, 618
        }
    }
}
